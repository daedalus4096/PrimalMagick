plugins {
    id 'multiloader-loader'
    id 'net.neoforged.moddev'
}

jarJar.enabled(true)

neoForge {
    version = neoforge_version
    // Automatically enable neoforge AccessTransformers if the file exists
    def at = project(':common').file('src/main/resources/META-INF/accesstransformer.common.cfg')
    if (at.exists()) {
        accessTransformers.add(at.absolutePath)
    }
    parchment {
        minecraftVersion = parchment_minecraft
        mappingsVersion = parchment_version
    }
    runs {
        configureEach {
            systemProperty('neoforge.enabledGameTestNamespaces', mod_id)
            ideName = "NeoForge ${it.name.capitalize()} (${project.path})" // Unify the run config names with fabric
        }
        client {
            client()
        }
        data {
            programArguments = ['--mod', mod_id, '--all', '--output', rootProject.file('neoforge/src/generated/resources/').getAbsolutePath(), '--existing', rootProject.file('common/src/main/resources/').getAbsolutePath()]
            data()
        }
        server {
            server()
        }
        gameTestServer {
            type = "gameTestServer"
        }
    }
    mods {
        "${mod_id}" {
            sourceSet sourceSets.main
        }
    }
}

dependencies {
    // Verdant Core
    jarJar(group: 'com.verdantartifice.verdantcore', name: "verdantcore-neoforge-${minecraft_version}", version: "${verdantcore_version_range}")
    runtimeOnly("com.verdantartifice.verdantcore:verdantcore-neoforge-${minecraft_version}:${verdantcore_dev_version}")
    // compile against the JEI API but do not include it at runtime
    compileOnly("mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}")
    // at runtime, use the full JEI jar for NeoForge
    runtimeOnly("mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}")
    // Common Networking
    implementation "mysticdrew:common-networking-neoforge:${common_network_version}-${minecraft_version}"
}

sourceSets.main.resources.srcDir 'src/generated/resources'
processResources {
    from(project(":common").sourceSets.main.resources)
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}
